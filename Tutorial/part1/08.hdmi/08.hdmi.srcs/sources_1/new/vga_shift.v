`define MODE_800_600_60
`ifdef MODE_800_600_60
	parameter SVO_MODE             =   "800x600R";
	parameter SVO_FRAMERATE        =   60;
	parameter SVO_BITS_PER_PIXEL   =   18;
	parameter SVO_BITS_PER_RED     =    6;
	parameter SVO_BITS_PER_GREEN   =    6;
	parameter SVO_BITS_PER_BLUE    =    6;
	parameter SVO_BITS_PER_ALPHA   =    0;
`endif
`include "svo_defines.vh"

module vga_shift #( `SVO_DEFAULT_PARAMS )(
    input	wire			  rst     		,//????????
    input	wire			  vpg_pclk    	,//????????????????????
    output	reg			  	  vpg_de      	,//?????????????????????????????????????
    output	reg			      vpg_hs      	,//??????????????????????
    output	reg			      vpg_vs      	,//??????????????????????
    output	wire      [7:0]	  rgb_r        	,//???????????????????
    output	wire      [7:0]	  rgb_g        	,//???????????????????
    output	wire      [7:0]	  rgb_b        	 //???????????????????
);

`SVO_DECLS

localparam       H_TOTAL = SVO_HOR_TOTAL - 1  ;//????????????????????????????????????????????
localparam       H_SYNC = SVO_HOR_SYNC - 1     ;//????????????????????????????
localparam       H_START = SVO_HOR_FRONT_PORCH + SVO_HOR_SYNC - 1   ;//????????????????????????????????????????????????????????
localparam       H_END = SVO_HOR_TOTAL - SVO_HOR_BACK_PORCH - 1    ;//????????????????????????????????????????????????????????????
localparam       V_TOTAL = SVO_VER_TOTAL - 1  ;//??????????????????????????????????????????
localparam       V_SYNC = SVO_VER_SYNC - 1      ;//????????????????????????????
localparam       V_START = SVO_VER_FRONT_PORCH + SVO_VER_SYNC - 1    ;//????????????????????????????????????????????????????????
localparam       V_END = SVO_VER_TOTAL - SVO_VER_BACK_PORCH - 1    ;//????????????????????????????????????????????????????????????
localparam       SQUARE_X    =   50 ;//????????????????????
localparam       SQUARE_Y    =   50 ;//???????????????????????
localparam       SCREEN_X    =   SVO_HOR_PIXELS;//????????????????????????
localparam       SCREEN_Y    =   SVO_VER_PIXELS;//????????????????????????????

//=======================================================
//  Signal declarations
//=======================================================
reg [12:0]	cnt_h;//????????????????????
reg [12:0]	cnt_v;//????????????????????????
reg [11:0]	x    ;//????????????????????????????????????????
reg 		flag_x;//????????????????????????????????????????????????
reg [11:0]	y    ;//????????????????????????????????????????????
reg 		flag_y;//??????????????????????????????????????????????
reg [23:0]	rgb 	;
assign {rgb_r,rgb_g,rgb_b} = rgb;


 //????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		cnt_h <= 'd0;
	end
	else if (cnt_h == H_TOTAL) begin//???????????????????????????????????????????????
		cnt_h <= 'd0;
	end
	else if(cnt_h != H_TOTAL) begin//?????????????????????????????????????????????????????????????????????????????
		cnt_h <= cnt_h + 1'b1;
	end
end

//????????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		cnt_v <='d0;
	end
	else if (cnt_v == V_TOTAL && cnt_h == H_TOTAL) begin//?????????????????????????????????????????????????????????????????????????????????????????????
		cnt_v <= 'd0;
	end
	else if(cnt_h == H_TOTAL) begin//???????????????????????????????????????????????????????????????
		cnt_v <= cnt_v + 1'b1;
	end
end

//??????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		vpg_hs <= 1'b1;
	end
	else if (cnt_h == H_TOTAL) begin
		vpg_hs <= 1'b1;
	end
	else if (cnt_h == H_SYNC) begin
		vpg_hs <= 1'b0;
	end
end

//??????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		vpg_vs <= 1'b1;
	end
	else if (cnt_v == V_TOTAL && cnt_h == H_TOTAL) begin
		vpg_vs <= 1'b1;
	end 
	else if (cnt_v == V_SYNC && cnt_h == H_TOTAL) begin
		vpg_vs <=  1'b0;
	end
end


always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		vpg_de <= 1'b0;
	end
	else if ((cnt_h >= H_START) && (cnt_h < H_END) && (cnt_v >= V_START) && (cnt_v < V_END)) begin
		vpg_de <= 1'b1;
	end 
	else begin
		vpg_de <=  1'b0;
	end
end
//?????????????????????????????????????????????????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		x <='d0;
	end
	else if (flag_x == 1'b0 && cnt_v == V_TOTAL && cnt_h == H_TOTAL) begin
		x <= x + 1'b1;
	end
	else if(flag_x == 1'b1 && cnt_v == V_TOTAL && cnt_h == H_TOTAL) begin
		x <= x - 1'b1;
	end
end

//??????????????????????????????????????????????????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		flag_x <= 1'b0;
	end
	else if (flag_x == 1'b0 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL && x==(H_END - H_START - SQUARE_X - 1'b1)) begin
		flag_x <= 1'b1;
	end
	else if (flag_x == 1'b1 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL && x=='d1) begin
		flag_x <= 1'b0;
	end
end

//?????????????????????????????????????????????????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		y <= 'd0;
	end
	else if (flag_y == 1'b0 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL) begin
		y <= y + 1'b1;
	end
	else if (flag_y == 1'b1 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL) begin
		y <= y - 1'b1;
	end
end

//??????????????????????????????????????????????????????????????????????
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		flag_y <= 1'b0;
	end
	else if (flag_y == 1'b0 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL && y==(V_END - V_START - SQUARE_Y - 1'b1)) begin
		flag_y <= 1'b1;
	end
	else if (flag_y == 1'b1 && cnt_v ==V_TOTAL && cnt_h == H_TOTAL && y=='d1 ) begin
		flag_y <= 1'b0;
	end
end

//rgb
always @(posedge vpg_pclk ) begin
	if (rst==1'b1) begin
		rgb <='d0;
	end
	else if(cnt_h >=H_START+x && cnt_h <H_START+SQUARE_X+x && cnt_v >=V_START+y && cnt_v <V_START+SQUARE_Y+y)begin
		rgb <= 24'hFFB6C1;//?????????????????????????????
	end
	else if (cnt_h >=H_START && cnt_h <H_END && cnt_v >=V_START && cnt_v <V_END && cnt_h[4:0]>='d20) begin
		rgb <=24'h00FF00;//green
	end
	else if (cnt_h >=H_START && cnt_h <H_END && cnt_v >=V_START && cnt_v <V_END && (cnt_h[4:0]>='d10 && cnt_h[2:0]<'d20)) begin
		rgb <=24'h0000FF;//bulue
	end
	else if (cnt_h >=H_START && cnt_h <H_END && cnt_v >=V_START && cnt_v <V_END && cnt_h[4:0]<'d10) begin
		rgb <=24'hFF0000;//red
	end
	else begin
		rgb <= 'd0;
	end
end

endmodule
